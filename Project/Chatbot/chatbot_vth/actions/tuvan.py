# This files contains your custom actions which can be used to run
# custom Python code.
#
# See this guide on how to implement these action:
# https://rasa.com/docs/rasa/custom-actions


# package of RASA
from gettext import ngettext
from typing import Any, Text, Dict, List

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import FollowupAction

# handle package
import gc
import json
from datetime import datetime, date, timedelta
from requests import delete

import asyncio

#class custome
from actions.act_help.crawl import crawl
from actions.act_help import conf as cf 
from actions.act_help.seek import seek
#data product
from assets.data.product import details as product_details

#!------------------------------------- """ TÆ¯ Váº¤N """
""" TÆ° váº¥n theo loáº¡i sáº£n pháº©m """
class act_tuvan_web(Action):

    def name(self) -> Text:
        return "act_tuvan_web"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        try:
            print('[%s] <- %s' % (self.name(), tracker.latest_message['text']))

            # Opening JSON file
            # returns JSON object as
            catagory = None
            for item in cf.catagory.keys():
                if tracker.latest_message['text'].lower().replace("?","").find(item) > -1:
                    catagory = cf.catagory.get(item)
                    break
                
            if catagory is not None:
                with open(f'./assets/data/product/{catagory}.json', encoding='utf-8') as json_file:
                    data = json.load(json_file) #type: dict
                    """{
                        "type": "Dá»¤NG Cá»¤ LÃ€M VÆ¯á»œN",
                        "time": "2022-04-26",
                        "data": [
                            {
                                "name": "BÃ¬nh tÆ°á»›i cÃ¢y",
                                "price": "25,000â‚« 13,000â‚«",
                                "link": "https://vutruhat.com/san-pham/binh-tuoi-cay/",
                                "image": "https://vutruhat.com/wp-content/uploads/2021/09/binh-tuoi-cay-vu-tru-hat-min-300x300.jpg",
                                "status": "Háº¿t hÃ ng"
                            },
                            {...}
                    }"""

                #Kiá»ƒm tra cáº§n call dá»¯ liá»‡u khÃ´ng
                if data["time"] != date.today().isoformat(): #NgÃ y lÆ°u gáº§n nháº¥t cÃ³ báº±ng vá»›i hiá»‡n táº¡i khÃ´ng, náº¿u k thÃ¬ call
                    # crawl dá»¯ liá»‡u (Cháº¡y asynce)
                    # open mutual stream to crawl data
                    loop = asyncio.get_event_loop()
                    loop.create_task(crawl.product(path=catagory, name_j=catagory))
                
                #--> Táº¡o Template
                if len(data["data"]) > 0:
                    elements = []
                    for item in data["data"]:
                        #MÃ´ táº£ giÃ¡
                        if item["price"].find("â€“") == -1 and item["price"].find(" ") > -1:
                            #GiÃ¡ giáº£m
                            item["price"] = item["price"].replace(" ", " giáº£m cÃ²n ")
                        elif item["price"].find("â€“") > -1 and item["price"].find(" ") > -1:
                            #Trong khoáº£ng
                            item["price"] = item["price"].replace("-", "Ä‘áº¿n")
                        #MÃ´ táº£ sáº£n pháº©m
                        desc = {
                            "sen-da" : product_details.sen_da.get(item["name"]),
                            "dung-cu" : product_details.dung_cu.get(item["name"]),
                            "hat-giong-cu-qua" : product_details.cu_qua.get(item["name"]),
                            "hat-giong" : product_details.rau_xanh.get(item["name"])
                        }.get(catagory, "")

                        elements.append(
                            {
                                "title": item["name"],
                                "image_url": item["image"],
                                "subtitle": "GiÃ¡: " + item["price"] + " | Tráº¡ng thÃ¡i: " + item["status"] + "| "+ desc,
                                "default_action": {
                                    "type": "web_url",
                                    "url": item["link"],
                                    "webview_height_ratio": "tall",
                                },
                                "buttons":[
                                    {
                                        "type":"web_url",
                                        "url": item["link"],
                                        "title":"Xem thÃªm ..."
                                    },{
                                        "type":"postback",
                                        "title":"Mua ngay ðŸ”¥",
                                        "payload":"/ask_buy"
                                    }              
                                ]
                            }
                        )
                
                    #Respond to user
                    dispatcher.utter_message(
                        text = "THÃ”NG TIN Sáº¢N PHáº¨M " + data["type"]
                    )

                    # Kiá»ƒm tra xem cÃ³ sáº£n pháº©m khÃ´ng
                    new_elm = []
                    # VÃ¬ facebook giá»›i háº¡n chá»‰ Ä‘Æ°á»£c 10 elements cho 1 láº§n gá»­i
                    # Cá»© 10 element sáº½ Ä‘Æ°á»£c gá»­i 1 láº§n, nhá»¯ng cÃ¡i cuá»‘i k chia háº¿t cho 10 ná»¯a thÃ¬ Ä‘Æ°á»£c gá»­i cuá»‘i cÃ¹ng
                    for i in range(1,len(elements)+1):
                        if i%10==0:
                            new_elm.append(elements[i-1])
                            res = {
                                "attachment":{
                                    "type":"template",
                                    "payload":{
                                        "template_type":"generic",
                                        "elements": new_elm
                                    }
                                }
                            }
                            dispatcher.utter_message(
                                json_message = res
                            )
                            new_elm = []
                        else:
                            new_elm.append(elements[i-1])
                        if i == len(elements):
                            res = {
                                "attachment":{
                                    "type":"template",
                                    "payload":{
                                        "template_type":"generic",
                                        "elements": new_elm
                                    }
                                }
                            }
                            dispatcher.utter_message(
                                json_message = res
                            )
                    del res, new_elm, elements
                else: 
                    dispatcher.utter_message(
                        text = "Ráº¥t tiáº¿t hiá»‡n chÃºng tÃ´i khÃ´ng cÃ³ thÃ´ng tin sáº£n pháº©m nÃ y:("
                    )
                if 'data' in locals(): del data

            else:
                dispatcher.utter_message(
                    text = "Ráº¥t tiáº¿t, loáº¡i sáº£n pháº©m báº¡n tÃ¬m khÃ´ng cÃ³ :("
                )
            
            del catagory
            gc.collect()
            return []
        except Exception as error:
            print("-->Error<--")
            print(error)
            dispatcher.utter_message(text="Xin lá»—i báº¡n, hiá»‡n táº¡i há»‡ thÃ´ng Ä‘ang bá»‹ lá»—i ðŸ˜“ðŸ˜“ðŸ˜“")
            return [FollowupAction("act_accept_buy")]





""" TÆ° váº¥n chi tiáº¿t theo tá»«ng sáº£n pháº©m """
class act_tuvan_web_details(Action):

    def name(self) -> Text:
        return "act_tuvan_web_details"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # try:
        print('[%s] <- %s' % (self.name(), tracker.latest_message['text']))
        #1. Get name intent and then set condition to finding catagory 
        
        list_i, seek_i, catagory, time =  seek.product(intent = tracker.latest_message['intent']['name'], 
                                message = tracker.latest_message['text'].lower().replace("?",""))
        #--> Táº¡o Template
        elements = []
        
        if catagory is not None :
            if time != date.today().isoformat(): #NgÃ y lÆ°u gáº§n nháº¥t cÃ³ báº±ng vá»›i hiá»‡n táº¡i khÃ´ng, náº¿u k thÃ¬ call
                # crawl dá»¯ liá»‡u (Cháº¡y asynce)
                # open mutual stream to crawl data
                loop = asyncio.get_event_loop()
                loop.create_task(crawl.product(path=catagory, name_j=catagory))
                
            if len(list_i) > 0:
                for item in list_i:
                    #MÃ´ táº£ giÃ¡
                    if item["price"].find("â€“") == -1 and item["price"].find(" ") > -1:
                        #GiÃ¡ giáº£m
                        item["price"] = item["price"].replace(" ", " giáº£m cÃ²n ")
                    elif item["price"].find("â€“") > -1 and item["price"].find(" ") > -1:
                        #Trong khoáº£ng
                        item["price"] = item["price"].replace("-", "Ä‘áº¿n")
                    #MÃ´ táº£ sáº£n pháº©m
                    desc = {
                        "sen-da" : product_details.sen_da.get(item["name"]),
                        "dung-cu" : product_details.dung_cu.get(item["name"]),
                        "hat-giong-cu-qua" : product_details.cu_qua.get(item["name"]),
                        "hat-giong" : product_details.rau_xanh.get(item["name"])
                    }.get(catagory, "")
                    
                    elements.append(
                        {
                            "title": item["name"],
                            "image_url": item["image"],
                            "subtitle": "GiÃ¡: " + item["price"] + "| Tráº¡ng thÃ¡i: " + item["status"] + "| "+ desc,
                            "default_action": {
                                "type": "web_url",
                                "url": item["link"],
                                "webview_height_ratio": "tall",
                            },
                            "buttons":[
                                {
                                    "type":"web_url",
                                    "url": item["link"],
                                    "title":"Xem thÃªm ..."
                                },{
                                    "type":"postback",
                                    "title":"Mua ngay ðŸ”¥",
                                    "payload":"/ask_buy"
                                }              
                            ]      
                            #NOTE: Gá»­i API tá»›i zalo cho mua ngay
                        }
                    )
                #Respond to user
                dispatcher.utter_message(
                    text = "THÃ”NG TIN Sáº¢N PHáº¨M " + seek_i.upper()
                )
                new_elm = []
                # VÃ¬ facebook giá»›i háº¡n chá»‰ Ä‘Æ°á»£c 10 elements cho 1 láº§n gá»­i
                # Cá»© 10 element sáº½ Ä‘Æ°á»£c gá»­i 1 láº§n, nhá»¯ng cÃ¡i cuá»‘i k chia háº¿t cho 10 ná»¯a thÃ¬ Ä‘Æ°á»£c gá»­i cuá»‘i cÃ¹ng
                for i in range(1,len(elements)+1):
                    if i%10==0:
                        new_elm.append(elements[i-1])
                        res = {
                            "attachment":{
                                "type":"template",
                                "payload":{
                                    "template_type":"generic",
                                    "elements": new_elm
                                }
                            }
                        }
                        dispatcher.utter_message(
                            json_message = res
                        )
                        new_elm = []
                    else:
                        new_elm.append(elements[i-1])
                    if i == len(elements):
                        res = {
                            "attachment":{
                                "type":"template",
                                "payload":{
                                    "template_type":"generic",
                                    "elements": new_elm
                                }
                            }
                        }
                        dispatcher.utter_message(
                            json_message = res
                        )
                del res, new_elm
            else: 
                    dispatcher.utter_message(
                        text = "Ráº¥t tiáº¿t hiá»‡n chÃºng tÃ´i khÃ´ng cÃ³ thÃ´ng tin sáº£n pháº©m nÃ y:("
                    )
        else:
            dispatcher.utter_message(
                text = "Ráº¥t tiáº¿t, loáº¡i sáº£n pháº©m báº¡n tÃ¬m khÃ´ng cÃ³ :("
            )
        
        del elements, seek_i, list_i, time
        gc.collect()
        return []
        # except Exception as error:
        #     print("-->Error<--")
        #     print(error)
        #     dispatcher.utter_message(text="Xin lá»—i báº¡n, hiá»‡n táº¡i há»‡ thÃ´ng Ä‘ang bá»‹ lá»—i ðŸ˜“ðŸ˜“ðŸ˜“")
        #     return [FollowupAction("act_accept_buy")]

